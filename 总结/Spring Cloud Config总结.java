Spring Cloud Config
	提供客户端和服务端的支持
	提供各个环境的配置
	配置文件修改后可以快速生效
	可以提供不同版本的管理
	可以支持不同的语言（java、.Net、Delphi、node等）
	支持一定数量的并发
	高可用（防止意外宕机导致配置不可用）
实战：
	配置服务端：Git，通过访问规则访问配置文件，配置中心高可用
	客户端访问配置文件，refresh
构建配置中心：
	1.添加依赖包：spring-cloud-config-server
	2.添加注解 @EnableConfigServer
	应用：
		配置 Git：
			spring.cloud.config.server.git.[uri, searchPaths, username, password] 
		配置规则详解:
			/{application}-{profiles}[/{label}]
			/{application}-{profiles}.[yml,properties,json.and etc]
			[/{label}]/{application}-{profiles}.[yml,properties,json.and etc]
	原理：实际上通过git clone 命令将配置内容复制了一份在本地存储，然后读取这些内容并返回给微服务应用进行加载
	3.基础架构：远程GIT仓库、本地Git仓库、Config-server、Config-Client[ServiceA、ServiceB]
客户端配置：
	1.添加依赖包：spring-cloud-starter-config
	2.bootstrap.properties 中实现外部化配置配置 spring.cloud.config.[name, uri, lable, profile]
	应用：
		spring.cloud.config.name: 对应配置文件中{application}部分
		spring.cloud.config.profile：对应{profile}部分
		spring.cloud.config.label：对应git的分支。如果配置中心使用的是本地存储，则该参数无用
		spring.cloud.config.uri：配置中心的具体地址
		spring.cloud.config.discovery.service-id：指定配置中心的service-id，便于扩展为高可用配置集群。
	原理流程：
		应用启动时，根据bootstrap.properties中配置的应用名{application}、环境名{profile}、分支名{label}，向ConfigServer请求获取配置信息
		Config Server根据自己维护的Git仓库信息和客户端传递过来的配置定位信息去查找配置信息
		通过 git clone 命令找到的配置信息下载到Config Server的文件系统中
		Config Server 创建 Spring 的ApplicationContext 实例，并从Git本地仓库加载配置文件，最后将这些配置内容读取出来返回给客户端应用
		客户端应用在获得外部配置文件后加载到客户端的ApplicationContext实例，该配置内容的优先级高于客户端的Jar包内部配置内容，所以Jar包中重复的内容将不再被加载
	4.Git配置仓库
		基本配置：spring.cloud.config.server.git.[uri, searchPaths, username, password]，uri可通过远程配置，也可以通过本地文件 File:// 配置
		占位符URI：{application}、{profile}、{label}
			{application}可通过客户端spring.application.name传给config server，从而根据微服务应用的属性动态获取不同位置的配置
			通过再URI中使用占位符可以帮助我们规划和实现通用的仓库配置：
				代码库：http://git.oschina.net/didispace/member-service
				配置库：http://git.oschina.net/didispace/member-service-config
				git uri配置：http://git.oschina.net/didispace/{application}-config
		配置多个仓库
			spring.cloud.config.server.git.repos中配置：
				spring.cloud.config.server.git.dev.pattern=dev/*                        */
				spring.cloud.config.server.git.dev.uri=file://home/git/config-repo  
		子目录存储
			spring.cloud.config.server.git.searchPaths
		访问权限：若采用HTTP的方式进行认证，需要增加 username 和 password 属性来配置账户
	5.SVN配置仓库
		引入svnkit依赖，通过spring.cloud.config.server.svn.[uri, username, password]
	6.本地仓库
		使用了Git或SVN仓库后，文件会在Config Server的本地文件系统中存储一份，默认存储于以config-repo为前缀的临时目录中，比如/tmp/config-repo-<随机数>的目录
		指定本地存储目录：spring.cloud.config.server.[git, svn].basedir
	7.本地文件系统
		设置 spring.profiles.active=navitve，config server 会默认从应用的 src/main/resource 目录下搜索配置文件
		指定搜索配置文件路径：spring.cloud.config.server.native.searchLocations
	8.健康监测
	9.属性覆盖
		在Config Server中配置 spring.cloud.config.server.override.[key]=[value],客户端从Config Server中获取配置信息时，会取得这些信息。通过该模式，可以为客户端提供默认值
		客户端也可以用更高优先级的配置方式，来选择是否使用ConfigServer提供的默认值
	10.安全配置
		由于配置中心存储的内容比较敏感，所以需要一定的安全措施。结合Spring Security对配置中心进行安全保护
		引入security依赖包，配置security.user.name、 security.user.password
	11.加密解密
		Spring Cloud Config 提供对属性进行加解密的功能，以保护配置文件中信息安全
		具体配置暂时未深入了解
	12.高可用配置
		传统模式：将所有的Config Server都指向同一个Git仓库，所有的配置内容就通过统一的共享文件系统来维护。
		服务模式：将Config Server作为一个普通的微服务应用，纳入Eureka的服务治理体系中
		服务端：config server注册到Eureka
		客户端：config client 注册到Eureka,配置spring.cloud.config.discovery.service-id,spring.cloud.config.discovery.enable=true,spring.cloud.config.profile
	13.失败快速响应与重试
		失败快速响应:spring.cloud.config.failFast=true
		重试:引入spring-retry 和 spring-boot-starter-aop
		配置:spring.cloud.config.retry.[multiplier: 1000, initial-interval, max-interval:2000, max-attenpts:6]
	14.动态刷新配置：
		客户端引入 spring-boot-starter-actuator
		@RefreshScope
		访问 /refresh 端点
https://gitee.com/hjj520/spring-cloud-2.x.git
https://www.cnblogs.com/babycomeon/p/11123850.html		